/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package lab2;

import java.io.BufferedReader;
import java.io.FileReader;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import java.util.Stack;
import java.util.StringTokenizer;
import javax.swing.JOptionPane;

/**
 *
 * @author familia
 */
public class principal extends javax.swing.JFrame {

    ArrayList<Integer> vector = new ArrayList<Integer>();
    ArrayList<Integer> insert = new ArrayList<Integer>();
    ArrayList<Integer> select = new ArrayList<Integer>();
    ArrayList<Integer> quick = new ArrayList<Integer>();
    ArrayList<Integer> shell = new ArrayList<Integer>();
    Arbol arbol;
    
    ArrayList<String> cadena = new ArrayList<String>();

    /**
     * Creates new form principal
     */
    public principal() {
        initComponents();
        arbol = new Arbol(lienzoPnl);

        archivo a = new archivo();
        String s1 = a.leerTxt("texto.txt");

        System.out.println(s1);
        //numeros();
        //escribir();
        cadenas();
        escribircade();
        

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mostrarjPanel = new javax.swing.JPanel();
        lienzoPnl = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        iteracionjTextArea = new javax.swing.JTextArea();
        buscarjButton = new javax.swing.JButton();
        aplicarjButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        buscarjTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        ordenamientosjComboBox = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        graficarjButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout lienzoPnlLayout = new javax.swing.GroupLayout(lienzoPnl);
        lienzoPnl.setLayout(lienzoPnlLayout);
        lienzoPnlLayout.setHorizontalGroup(
            lienzoPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1237, Short.MAX_VALUE)
        );
        lienzoPnlLayout.setVerticalGroup(
            lienzoPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 508, Short.MAX_VALUE)
        );

        iteracionjTextArea.setColumns(20);
        iteracionjTextArea.setRows(5);
        jScrollPane1.setViewportView(iteracionjTextArea);

        buscarjButton.setText("BUSCAR");
        buscarjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarjButtonActionPerformed(evt);
            }
        });

        aplicarjButton.setText("APLICAR");
        aplicarjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aplicarjButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("BUSCAR");

        jLabel2.setText("ORDENAMIENTOS");

        ordenamientosjComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Insertsort", "Selectsort", "Quicksort", "Shellsort" }));

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        graficarjButton.setText("GRAFICAR");
        graficarjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                graficarjButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mostrarjPanelLayout = new javax.swing.GroupLayout(mostrarjPanel);
        mostrarjPanel.setLayout(mostrarjPanelLayout);
        mostrarjPanelLayout.setHorizontalGroup(
            mostrarjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mostrarjPanelLayout.createSequentialGroup()
                .addGroup(mostrarjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mostrarjPanelLayout.createSequentialGroup()
                        .addGap(123, 123, 123)
                        .addComponent(buscarjButton, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(50, 50, 50)
                        .addComponent(ordenamientosjComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(50, 50, 50)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(mostrarjPanelLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(buscarjTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(50, 50, 50)
                        .addComponent(jLabel1)
                        .addGap(75, 75, 75)
                        .addComponent(jLabel2)
                        .addGap(27, 27, 27)
                        .addComponent(aplicarjButton, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(graficarjButton, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(mostrarjPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lienzoPnl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        mostrarjPanelLayout.setVerticalGroup(
            mostrarjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mostrarjPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mostrarjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mostrarjPanelLayout.createSequentialGroup()
                        .addGroup(mostrarjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(buscarjTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(aplicarjButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(mostrarjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(buscarjButton)
                            .addComponent(ordenamientosjComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(graficarjButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lienzoPnl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mostrarjPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mostrarjPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(21, 21, 21))
        );

        mostrarjPanel.getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void aplicarjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aplicarjButtonActionPerformed
        // TODO add your handling code here:
        String opcion = this.ordenamientosjComboBox.getSelectedItem().toString();
        if (opcion == "Insertsort") {
            for (int i = 0; i < vector.size(); i++) {
                insert.add(vector.get(i));
            }

            insercion();

        } else if (opcion == "Selectsort") {
            for (int i = 0; i < vector.size(); i++) {
                select.add(vector.get(i));
            }
            seleccion();

        } else if (opcion == "Quicksort") {
            this.iteracionjTextArea.setText("");
            for (int i = 0; i < vector.size(); i++) {
                quick.add(vector.get(i));
            }
            quickSort(0, quick.size() - 1);

        } else {
            for (int i = 0; i < vector.size(); i++) {
                shell.add(vector.get(i));
            }
            shellsort();

        }
    }//GEN-LAST:event_aplicarjButtonActionPerformed

    private void buscarjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarjButtonActionPerformed
        // TODO add your handling code here:
        int valor = Integer.parseInt(this.buscarjTextField.getText());

    }//GEN-LAST:event_buscarjButtonActionPerformed
//////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////
    // DESDE AQUIIIIIIIIIII/////////////////////////////////////////////////////////
    String exp_reg="(a|b)+c*d#";
    public ArrayList recorrido = new ArrayList();
    
    //*****************************************************
    
    private boolean isOperator(char character){
        if( (character != '|') && (character != '.') && (character != '*') && (character != '+') && (character != '?') && (character != '(') 
                    && (character != ')') && (character != '&') && (character != '[') && (character != ']') ){
            return false;
        }
        return true;
    }
    
     private boolean isOperator2(String character){
        if( (!"|".equals(character)) && (!".".equals(character)) && (!"*".equals(character)) && (!"+".equals(character)) && (!"?".equals(character)) && (!"(".equals(character)) 
                    && (!")".equals(character)) && (!"&".equals(character))&& (!".".equals(character)) && (!"[".equals(character)) && (!"]".equals(character)) ){
            return false;
        }
        return true;
    }
    
    private enum Operator {
        CAT(2), OR(1), INTE(5), MAS(5), AST(5);
        final int precedence;

        Operator(int p) {
            precedence = p;
        }
    }
    private Map<String, Operator> operatorMap = new HashMap<String, Operator>() {
        {
            put("|", Operator.OR);
            put("*", Operator.AST);
            put("?", Operator.INTE);
            put("+", Operator.MAS);
            put(".", Operator.CAT);

        }
    };

    private boolean isHigherPrec(String op, String sub) {
        return (operatorMap.containsKey(sub)
                && operatorMap.get(sub).precedence >= operatorMap.get(op).precedence);
    }
    
    
    //append añade en la ultima pocision de tal cosa
   // StringBuilder devuelve un String
    public Stack<String> stack = new Stack<String>();
    public Stack<String> variables = new Stack<String>();
      
       public String shuntingYard(String infix) {
        StringBuilder output = new StringBuilder();
        int cont=0, sw=0;
        
        for (String token : infix.split("")) {
            
            //operadores
            if ("*".equals(token) || "+".equals(token) || "?".equals(token)) {
                if (sw==0) {
                    output.append(token);
                }else{
                    sw=0;
                }
                

            }
            if (operatorMap.containsKey(token)) {

                while (!stack.isEmpty() && isHigherPrec(token, stack.peek())) {
                    output.append(stack.pop());
                    //elimina el ultimo elemento de stack y lo añade a output
                }
                if (!"*".equals(token) && !"+".equals(token) && !"?".equals(token)) {

                    stack.push(token);
                }

            } //left parenthesis
            else if (token.equals("(")) {
                stack.push(token);
            } //right parenthesis
            else if (token.equals(")")) {
                while (!stack.peek().equals("(")) { 
                    output.append(stack.pop());
                }
                stack.pop();
                if (!variables.empty() ) {  
                   
                    if (("*".equals(infix.substring(cont+1, cont+2)))|| ("+".equals(infix.substring(cont+1, cont+2)))||("?".equals(infix.substring(cont+1, cont+2)))) {
                        if (isOperator2(infix.substring(cont+1, cont+2))) {
                            output.append(infix.substring(cont+1, cont+2)).append(variables.pop());
                             sw=1;
                        }else{
                            output.append(variables.pop());
                        }
                        
                    }
                      
                }
              
            } //digit 
            else {
                    
                
                if (cont <= infix.length()-3) {
                    
                    if (!".(".equals(infix.substring(cont+1, cont+3))) {
                       
                        output.append(token);
                     }else{
                        //aqui hay un digito antes que un (
                        variables.push(token);
                        
                    }
                    
                }else{
                    if (cont+1==infix.length()) {
                        output.append(token);
                    }
                }
                
                
            }
            cont++;
        }

        while (!stack.isEmpty()) {
            output.append(stack.pop());
        }
        return output.toString();
         
    }
    
    
    
      public void precedencia() {
        String er = exp_reg;
        int cont = 0;
        String le, expresion = "";
          System.out.println("er es: "+ er);
        String vector[] = new String[er.length()];
        while (cont < er.length()) {
            le = er.substring(cont, cont + 1);
            vector[cont] = le;
            cont++;
        }
        
        for (int i = 0; i < vector.length ; i++) {
            if (i<vector.length-1) {
                    boolean SiveOp1 = !"*".equals(vector[i]) && !"+".equals(vector[i]) && !"?".equals(vector[i]) && !"|".equals(vector[i]) && !"(".equals(vector[i]) && !")".equals(vector[i]);
                    boolean SiveOp2 = !"*".equals(vector[i + 1]) && !"+".equals(vector[i + 1]) && !"?".equals(vector[i + 1]) && !"|".equals(vector[i + 1]) && !"(".equals(vector[i + 1]) && !")".equals(vector[i + 1]);
                    //si son diferentes de operadores=variable

                    
                    if (SiveOp1 && SiveOp2) {
                        //si hay dos variables junta se coloca 
                        expresion = expresion + vector[i] + ".";
                    }else{ if (SiveOp1 && "(".equals(vector[i+1])) {
                            // si hay una variable antes de un ( se coloca .
                            expresion = expresion + vector[i] + ".";
                            }else{ if (("*".equals(vector[i]) || "+".equals(vector[i]) || "?".equals(vector[i]))&& !")".equals(vector[i+1])) {
                                     // despues de cada *,+,? se coloca un .
                                     expresion = expresion + vector[i] + ".";
                                  }else{if (")".equals(vector[i]) && SiveOp2) {
                                          //si despues de un ) hay uba variable se coloca .
                                           expresion = expresion + vector[i] + ".";  
                                        }else{
                                             expresion = expresion + vector[i];
                                         }

                                     }

                             }

                     }
                    
             }else{
                
             expresion = expresion+vector[i];

            }
           
        }
        
        
        String output = shuntingYard(expresion);
        System.out.println("el orden es: " + output);

        for (String letra : output.split("")) {
            if (!" ".equals(letra)) {
                recorrido.add(letra);
            }
        }
        // recorrido es arraylis que contiene el orden en el que se realizan las operaciones
        for (int i = 0; i < recorrido.size(); i++) {
            System.out.println("lista: " + recorrido.get(i));
        }
       
        String cad;
        int tope=recorrido.size()-1;
        for (int i = tope; i>-1 ; i--) {
            cad = (String)recorrido.get(i);
            arbol.insetarNodo(cad);
        }
     
        
    }
    
    
    
    
    
    /////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////
      //////////////////////////////////////////////////////////////////////////////////////
      /////////////HASTA AQUIII/////////////////////////////////////////////////////////
    
   
    
    private void graficarjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_graficarjButtonActionPerformed
        
      precedencia();
        
    }//GEN-LAST:event_graficarjButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new principal().setVisible(true);
            }
        });
    }

    //ORDENAMIENTOS
    public void insercion() {
        this.iteracionjTextArea.setText("");
        int tmp, j, cont = 0;
        for (int i = 0; i < insert.size(); i++) {
            tmp = insert.get(i);
            j = i;
            while (j > 0 && tmp < insert.get(j - 1)) {
                insert.set(j, insert.get(j - 1));
                j--;
            }
            cont++;
            insert.set(j, tmp);
            this.iteracionjTextArea.append(cont + ") ");

            for (int z = 0; z < insert.size(); z++) {
                this.iteracionjTextArea.append(insert.get(z) + ", ");

            }
            this.iteracionjTextArea.append("\n");

        }

    }

    public void seleccion() {
        this.iteracionjTextArea.setText("");
        int tmp, men, sel = 0;
        for (int i = 0; i < select.size(); i++) {
            men = i;
            for (int j = i + 1; j < select.size(); j++) {
                if (select.get(j) < select.get(men)) {
                    men = j;

                }
            }
            if (men != i) {
                tmp = select.get(i);
                select.set(i, select.get(men));
                select.set(men, tmp);

            }
            sel++;

            for (int z = 0; z < select.size(); z++) {
                this.iteracionjTextArea.append(select.get(z) + ", ");

            }
            this.iteracionjTextArea.append("\n");

        }
    }

    public void quickSort(int izquierda, int derecha) {

        int pivote = quick.get(izquierda);
        int i = izquierda;
        int j = derecha;
        int auxIntercambio;
        while (i < j) {
            while (quick.get(i).compareTo(pivote) == -1 || quick.get(i).compareTo(pivote) == 0 && i < j) {
                i++;
            }
            while (quick.get(j).compareTo(pivote) == 1) {
                j--;
            }
            if (i < j) {
                auxIntercambio = quick.get(i);
                quick.set(i, quick.get(j));
                quick.set(j, auxIntercambio);
                for (int z = 0; z < quick.size(); z++) {
                    this.iteracionjTextArea.append(quick.get(z) + ", ");

                }
                this.iteracionjTextArea.append("\n");
            }
        }
        quick.set(izquierda, quick.get(j));
        quick.set(j, pivote);

        if (izquierda < j - 1) {
            quickSort(izquierda, j - 1);
        }
        if (j + 1 < derecha) {
            quickSort(j + 1, derecha);
        }
    }

  
    public void shellsort() {
        int salto, aux, i;
        boolean cambios;
        for (salto = shell.size() / 2; salto != 0; salto /= 2) {
            cambios = true;
            while (cambios) { // Mientras se intercambie algún elemento
                cambios = false;
                for (i = salto; i < shell.size(); i++) // se da una pasada
                {
                    if (shell.get(i - salto) > shell.get(i)) { // y si están desordenados
                        aux = shell.get(i); // se reordenan
                        shell.set(i, shell.get(i - salto));
                        shell.set(i - salto, aux);
                        cambios = true; // y se marca como cambio.
                        for (int z = 0; z < shell.size(); z++) {
                            this.iteracionjTextArea.append(shell.get(z) + ", ");

                        }
                        this.iteracionjTextArea.append("\n");
                    }
                }
            }
        }
    }

    //LLENAR
    public void numeros() {
        int n = 0;

        try {
            FileReader fr = new FileReader("texto.txt");
            BufferedReader br = new BufferedReader(fr);
            String linea;
            while ((linea = br.readLine()) != null) {
                System.out.println(linea);
                StringTokenizer st = new StringTokenizer(linea, ",");

                while (st.hasMoreTokens()) {
                    n = Integer.parseInt(st.nextToken());
                    vector.add(n);
                }
            }

        } catch (Exception e) {
            System.out.println(e);

        }

    }
    public void cadenas() {
        String n = "";

        try {
            FileReader fr = new FileReader("texto.txt");
            BufferedReader br = new BufferedReader(fr);
            String linea;
            while ((linea = br.readLine()) != null) {
                System.out.println(linea);
                StringTokenizer st = new StringTokenizer(linea, ",");

                while (st.hasMoreTokens()) {
                    n = st.nextToken().toString();
                    cadena.add(n);
                }
            }

        } catch (Exception e) {
            System.out.println(e);

        }

    }

    //ESCRIBIR
    public void escribir() {
        for (int i = 0; i < vector.size(); i++) {

            this.jTextArea1.append(vector.get(i) + ", ");

        }
    }
    public void escribircade() {
        for (int i = 0; i < cadena.size(); i++) {

            this.jTextArea1.append(cadena.get(i));

        }
    }

/*    public Nodo busqueda(int n) {
        Nodo aux = arbol.getRaiz();
        while (aux.getInfo() != n) {
            if (n < aux.getInfo()) {
                aux = aux.getHi();
            } else {
                aux = aux.getHd();
            }

            if (aux == null) {
                return null;
            }

        }
        arbol.draw2(aux);
        return aux;
    }*/

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton aplicarjButton;
    private javax.swing.JButton buscarjButton;
    private javax.swing.JTextField buscarjTextField;
    private javax.swing.JButton graficarjButton;
    private javax.swing.JTextArea iteracionjTextArea;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JPanel lienzoPnl;
    private javax.swing.JPanel mostrarjPanel;
    private javax.swing.JComboBox<String> ordenamientosjComboBox;
    // End of variables declaration//GEN-END:variables
}
